---
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import PostMetadata from "./PostMeta.astro";

interface Props {
	class?: string;
	entry: CollectionEntry<"posts">;
	title: string;
	url: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	description: string;
	draft: boolean;
	pinned?: boolean;
	style: string;
}
const {
	entry,
	title,
	url,
	published,
	updated,
	tags,
	category,
	description,
	pinned,
	style,
} = Astro.props;
const className = Astro.props.class;

const { remarkPluginFrontmatter } = await entry.render();
---

<div class:list={["card-base w-full rounded-[var(--radius-large)] overflow-hidden relative", className]} style={style}>
    <div class="p-6 relative">
        <!-- 标题和置顶图标 -->
        <a href={url}
           class="transition group w-full block font-bold mb-3 text-xl text-90
        hover:text-[var(--primary)] dark:hover:text-[var(--primary)]
        active:text-[var(--title-active)] dark:active:text-[var(--title-active)]
        before:w-1 before:h-4 before:rounded-md before:bg-[var(--primary)]
        before:absolute before:top-[28px] before:left-[-18px] before:block
        ">
            {pinned && <Icon name="mdi:pin" class="inline text-[var(--primary)] text-lg mr-2 -translate-y-0.5"></Icon>}
            {title}
            <Icon class="text-[var(--primary)] text-lg transition hidden group-hover:inline absolute translate-y-0.5 opacity-0 group-hover:opacity-100 -translate-x-1 group-hover:translate-x-0" name="material-symbols:chevron-right-rounded"></Icon>
        </a>

        <!-- metadata -->
        <PostMetadata published={published} updated={updated} tags={tags} category={category || undefined} hideTagsForMobile={true} hideUpdateDate={true} className="mb-3"></PostMetadata>

        <!-- description -->
        <div class="transition text-75 mb-3 pr-4 line-clamp-2">
            { description || remarkPluginFrontmatter.excerpt }
        </div>

        <!-- word count and read time  -->
        <div class="text-sm text-black/30 dark:text-white/30 flex gap-4 transition">
            <div>
                {remarkPluginFrontmatter.words} {" " + i18n(remarkPluginFrontmatter.words === 1 ? I18nKey.wordCount : I18nKey.wordsCount)}
            </div>
            <div>|</div>
            <div>
                {remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
            </div>
        </div>
    </div>
</div>
